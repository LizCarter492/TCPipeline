setwd("C:/Users/janet/OneDrive - Syracuse University/writing/SmithERL/repository/raw_data")
setwd("C:/Users/janet/OneDrive - Syracuse University/writing/SmithERL/repository/analysis_data")
library(GLMMadaptive)
require(lme4)
require(lmerTest)
#format data
d= read.csv( "analysis_ready_7.csv")
d$name = as.factor(d$name)
d$pressure = d$pressure_min
d$locGrp = as.factor(d$locGrp)
d$per = NA
for(i in 1:length(d$per)){
if(d$yr[i] < 1980){
d$per[i] <-1
} else if (d$yr[i] < 1985){
d$per[i] <-2
} else if (d$yr[i] < 1990){
d$per[i] <-3
} else if (d$yr[i] < 1995){
d$per[i] <-4
} else if (d$yr[i] < 2000){
d$per[i] <-5
} else if (d$yr[i] < 2005){
d$per[i] <-6
} else if (d$yr[i] < 2010){
d$per[i] <-7
} else if (d$yr[i] < 2015){
d$per[i] <-8
} else {
d$per[i] <-9
}
}
d$yr = as.factor(d$yr)
vars = gsub('[[:digit:]]+', '', d$name)
d_fs<-d
#Calculate fs' and add to original d
for(i in unique(d$locGrp)){
for(q in unique(d$per)){
d$failTF_sum[which(d$locGrp==i & d$per==q)] = round(d$failTF_sum[which(d$locGrp==i & d$per==q)] - mean(d$failTF_sum[which(d$locGrp==i & d$per==q & vars=="NoStorm")], na.rm=FALSE)/3, digits = 0)
}}
d$failTF_sum[d$failTF_sum<0]<-0
d <- d[!(vars=="NoStorm"),]
d <- d[complete.cases(d),]
#Normalize hurricane variables
#dn is a dataframe of hurricane data
dn <- scale(d[,c("wind_max","pressure_min","minlat_min")])
#name rownames by storm ID
rownames(dn)<-paste(d$name, d$locGrp, sep="_")
#Calculate principal components of three hurricane variables
pca <- princomp(dn)
#add first PC to analysis ready dataset, variable name HurComp
d$HurComp = pca$scores[,1]
d<-d[complete.cases(d),]
############################################################################################################################
#
#                     Binomial Mixed-Effects Model
#
############################################################################################################################
#initiate dataframe for binomial (no failures, one or more failures) dataset
d0 = d
d0$failTF_sum[d0$failTF_sum > 0]<-1
d0$failTF_sum<-as.factor(d0$failTF_sum)
#Train models
mb1 <- glmer(failTF_sum ~ 1 + (1 | yr) + (1|locGrp) , data = d0, family = binomial(link = "logit"))
mb2 <- glmer(failTF_sum ~  HurComp + (1 | yr) + (1|locGrp), data = d0, family = binomial(link = "logit"))
#Summarize models
summary(mb1)
summary(mb2)
#Intepreting the log odds ratio
plogis(fixef(mb2)[2])
############################################################################################################################
#
#                     Poisson Mixed-Effects Model
#
############################################################################################################################
m1 <- glmer(failTF_sum ~ 1 + (1 | yr) + (1|locGrp) , data = d, family = poisson(link = "log"))
m2 <- glmer(failTF_sum ~  HurComp + (1 | yr) + (1|locGrp), data = d, family = poisson(link = "log"))
#look at model residuals
plot(exp(predict(m2))~d$failTF_sum, xlim=c(0, 25), ylim=c(0, 25), xlab="observed fs'", ylab="Poisson predicted fs'")
abline(0,1)
summary(m1)
summary(m2)
##############################################################################################################################
#
#                   Save models and data derivatives to model_outputs folder
#
##############################################################################################################################
save(d_fs,d,d0,dn,m1,m2,mb1,mb2,pca,vars, file="../model_outputs/model_outputs.RData")
# Historical statistics
historical_mean_windspeed <- 53.704824202780046
historical_sd_windspeed <- 26.272791647341982
historical_mean_pressure <- 991.9623875715454
historical_sd_pressure <- 19.597726204224276
historical_mean_latitude <- 24.782739165985284
historical_sd_latitude <- 8.547811621083
# Future predictions for 2050
future_windspeed_2050 <- 57.879812176803924
future_pressure_2050 <- 987.3967669704609
future_latitude_2050 <- 22.28750042690649
# Standardize future predictions
future_windspeed_pc <- (future_windspeed_2050 - historical_mean_windspeed) / historical_sd_windspeed
future_pressure_pc <- (future_pressure_2050 - historical_mean_pressure) / historical_sd_pressure
future_latitude_pc <- (future_latitude_2050 - historical_mean_latitude) / historical_sd_latitude
# Transform future predictions into pc space
# Transform future predictions into pc space
# https://cran.r-project.org/web/packages/LearnPCA/vignettes/Vig_04_Scores_Loadings.pdf
# https://cran.r-project.org/web/packages/pls/vignettes/pls-manual.pdf
# Transform future predictions into pc space
# https://cran.r-project.org/web/packages/LearnPCA/vignettes/Vig_04_Scores_Loadings.pdf
# https://cran.r-project.org/web/packages/pls/vignettes/pls-manual.pdf
# Section 8
# Combine into a single HurComp value
# Transform future predictions into pc space
# https://cran.r-project.org/web/packages/LearnPCA/vignettes/Vig_04_Scores_Loadings.pdf
# https://cran.r-project.org/web/packages/pls/vignettes/pls-manual.pdf
# Section 8
# Combine into a single HurComp value
future_hurcomp_2050 <- predict(pca, newdata=c(future_windspeed_pc, future_pressure_pc, future_latitude_pc))
names(d)
d_fs
# Transform future predictions into pc space
# https://cran.r-project.org/web/packages/LearnPCA/vignettes/Vig_04_Scores_Loadings.pdf
# https://cran.r-project.org/web/packages/pls/vignettes/pls-manual.pdf
# Section 8
# Combine into a single HurComp value
future_hurcomp_2050 <- predict(pca, newdata=data.frame(wind_max, pressure_min, minlat_min))
# Standardize future predictions
wind_max <- (future_windspeed_2050 - historical_mean_windspeed) / historical_sd_windspeed
pressure_min <- (future_pressure_2050 - historical_mean_pressure) / historical_sd_pressure
minlat_min <- (future_latitude_2050 - historical_mean_latitude) / historical_sd_latitude
# Transform future predictions into pc space
# https://cran.r-project.org/web/packages/LearnPCA/vignettes/Vig_04_Scores_Loadings.pdf
# https://cran.r-project.org/web/packages/pls/vignettes/pls-manual.pdf
# Section 8
# Combine into a single HurComp value
future_hurcomp_2050 <- predict(pca, newdata=data.frame(wind_max, pressure_min, minlat_min))
future_hurcomp_2050
# Transform future predictions into pc space
# https://cran.r-project.org/web/packages/LearnPCA/vignettes/Vig_04_Scores_Loadings.pdf
# https://cran.r-project.org/web/packages/pls/vignettes/pls-manual.pdf
# Section 8
# Combine into a single HurComp value
future_hurcomp_2050 <- predict(pca, newdata=data.frame(wind_max, pressure_min, minlat_min))[1]
future_hurcomp_2050
# Ensure locGrp in newdata matches levels in original model
levels(newdata$locGrp) <- levels(d$locGrp)
# Make predictions using the binomial model
binom_predictions <- predict(mb2, newdata = newdata, re.form = NA, type = "response", allow.new.levels = TRUE)
# Create new data frame for prediction
newdata <- data.frame(
HurComp = future_hurcomp_2050,
yr = factor(rep(NA, 6)),
locGrp = factor(0:5)
)
# Ensure locGrp in newdata matches levels in original model
levels(newdata$locGrp) <- levels(d$locGrp)
# Make predictions using the binomial model
binom_predictions <- predict(mb2, newdata = newdata, re.form = NA, type = "response", allow.new.levels = TRUE)
# Make predictions using the Poisson model
poisson_predictions <- exp(predict(m2, newdata = newdata, re.form = NA, type = "response", allow.new.levels = TRUE))
# Print the predictions
cat("Binomial model predictions (probability of failure):\n")
print(binom_predictions)
# Make predictions using the binomial model
binom_predictions <- predict(mb2, newdata = newdata,  type = "response", allow.new.levels = TRUE)
# Make predictions using the Poisson model
poisson_predictions <- exp(predict(m2, newdata = newdata,  type = "response", allow.new.levels = TRUE))
# Print the predictions
cat("Binomial model predictions (probability of failure):\n")
print(binom_predictions)
cat("\nPoisson model predictions (expected number of failures):\n")
print(poisson_predictions)
# Plotting the predictions
plot(exp(predict(m2, newdata = newdata, allow.new.levels = TRUE)), type = "b", col = "blue", pch = 19,
xlab = "Location Group", ylab = "Predicted Failures",
main = "Predicted Pipeline Failures by Location Group (2050)")
# Plotting the predictions
plot(exp(predict(m2, newdata = newdata, allow.new.levels = TRUE)), type = "p", col = "blue", pch = 19,
xlab = "Location Group", ylab = "Predicted Failures",
main = "Predicted Pipeline Failures by Location Group (2050)")
head(d)
mean(d$HurComp)
histdata <- data.frame(
HurComp = mean(d$HurComp),
yr = factor(rep(NA, 6)),
locGrp = factor(0:5)
)
